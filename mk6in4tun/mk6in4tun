#!/bin/bash

set -e
die() { echo >&2 "$@" ; exit 1 ; }

rmt_ipv4="$1"
[ -n "$rmt_ipv4" ] || die "specify a remote host to use"

route_bits=$(ip ro get "$rmt_ipv4" | awk '
/^'"$rmt_ipv4"' / {
        dev=""
        src=""
        for (i=1;i<=NF;i++) {
                if ($i == "dev") { i++ ; dev=$i ; }
                if ($i == "src") { i++ ; src=$i ; }
        }

        print "lcl_dev=" dev
        print "lcl_ipv4=" src
        exit 0
}
')
[ -n "$route_bits" ] || die "couldn't figure out the reoute to $rmt_ipv4"
eval $route_bits

[ -n "$lcl_dev" ] || die "couldn't figure out local IPv4 device for the tunnel"
[ -n "$lcl_ipv4" ] || die "couldn't figure out local IPv4 address for the tunnel"

priv=$(printf "%04x" $(($RANDOM & 0xffff)))

#net_ipv6="f8c0:$priv:/64"
lcl_ipv6="f8c0:$priv::$lcl_ipv4"
rmt_ipv6="f8c0:$priv::$rmt_ipv4"

build_tun() {
        local tun_name="$1"
        local tun_v4_rmt="$2"
        local tun_v6_lcl="$3"
        local tun_v4_lcl="$4"
        local tun_dev_lcl="$5"

        [ -z "$tun_dev_lcl" ] || tun_dev_lcl="dev $tun_dev_lcl"

        cat <<END
    sudo modprobe ipv6
    sudo ip tunnel add $tun_name mode sit local $tun_v4_lcl remote $tun_v4_rmt ttl 64 $tun_dev_lcl
    sudo ip addr add dev $tun_name $tun_v6_lcl/64
    sudo ip link set dev $tun_name up
    sudo iptables -I INPUT -s $tun_v4_rmt -d $tun_v4_lcl -p 41 -j ACCEPT
END
}

echo >&2 "### tunnel topology"
cat <<END
    [$lcl_ipv6] $lcl_ipv4 ($lcl_dev) <======> (???) $rmt_ipv4 [$rmt_ipv6]
END


echo >&2
echo >&2 "### local setup ###"
build_tun "tun$priv" \
            "$rmt_ipv4" \
            "$lcl_ipv6" \
            "$lcl_ipv4" \
            "$lcl_dev"

echo >&2
echo >&2 "### remote setup ###"
build_tun "tun$priv" \
            "$lcl_ipv4" \
            "$rmt_ipv6" \
            "$rmt_ipv4"

echo >&2
echo >&2 "### taredown instructions ###"
cat <<END
    sudo ip tunnel rem tun$priv
END
